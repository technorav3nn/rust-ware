use std::sync::Mutex;

use serde::{Deserialize, Serialize};
use sysinfo::{PidExt, ProcessExt, System, SystemExt};

lazy_static! {
    #[allow(non_upper_case_globals)]
    static ref sys_info: Mutex<System> = {
        let unsafe_sys_info = System::new_all();
        Mutex::new(unsafe_sys_info)
    };
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Process {
    pub pid: u32,
    pub command: String,
    pub arguments: Vec<String>,
}

/// Gets all the Roblox processes running on the system.
/// Returns a vector of  `Process`es.
pub fn get_roblox_processes() -> Vec<Process> {
    let mut result: Vec<Process> = Vec::new();

    for process in sys_info.lock().unwrap().processes_by_name("RobloxPlayer") {
        let args = process.cmd().to_vec();
        let filtered_args = args
            .into_iter()
            .filter(|e| return e.find("--crashHandler").is_none());

        result.push(Process {
            pid: process.pid().as_u32(),
            command: process.name().to_string(),
            arguments: filtered_args.collect(),
        });
    }

    result
}
